# Асинхронный код — это подход к многозадачности, при котором программа может выполнять несколько задач одновременно без создания отдельных процессов или потоков.
# Вместо этого задачи выполняются в рамках одного потока выполнения, но с использованием механизмов событий и обратных вызовов.

# Примеры асинхронных операций в Python:
    # ● обработка сетевых запросов
    # ● чтение и запись в файлы
    # ● обработка пользовательских событий в графическом интерфейсе

# Преимущества асинхронного кода:
    # ● более эффективное использование ресурсов процессора и памяти
    # ● возможность обрабатывать большое количество задач одновременно без создания отдельных процессов или потоков
    # ● упрощение кода и улучшение его читаемости

# Недостатки асинхронного кода:
    # ● сложность отладки и тестирования
    # ● возможность возникновения ошибок из-за неправильного использования механизмов событий и обратных вызовов
    # ● ограниченная поддержка сторонними библиотеками

# Корутины — это функции, которые могут приостанавливать свое выполнение, чтобы дать возможность другим корутинам выполниться.

# События используются для уведомления корутин о том, что какое-то событие произошло (например, завершение сетевого запроса).

# Цикл событий — это основной механизм, который управляет выполнением корутин и обработкой событий.

import asyncio


async def print_numbers(): # корутина
    for i in range(10):
        print(i)
        await asyncio.sleep(1) # в эту одну секунду другие процессы и потоки могут выполнять действия

async def print_letters(): # корутина
    for letter in ['a', 'b', 'c', 'd', 'e', 'f']:
        print(letter)
        await asyncio.sleep(0.5)

async def main():
    task_1 = asyncio.create_task(print_numbers()) # корутина
    task_2 = asyncio.create_task(print_letters()) # корутина
    await task_1 # запуск корутины
    await task_2

asyncio.run(main()) # цикл событий

# 0 a b 1 c d ...