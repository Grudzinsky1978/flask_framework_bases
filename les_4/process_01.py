# Многопроцессорный подход - подход к многозадачности, при котором программа может  выполнять несколько задач одновеременно в разных процессах

# Примеры многопроцессорных операций в Python:
    # ● параллельная обработка большого объема данных
    # ● одновременное выполнение нескольких запросов к базе данных
    # ● многопроцессорный веб-сервер, обрабатывающий несколько запросов одновременно

# Преимущества многопроцессорного кода:
    # ● возможность использования нескольких ядер процессора для выполнения программы
    # ● увеличение производительности программы за счет параллельного выполнения задач
    # ● возможность выполнения нескольких задач одновременно без блокировки 

# Недостатки многопроцессорного кода:
    # ● возможность возникновения конкуренции за ресурсы
    # ● сложность управления и координации процессов
    # ● возможность блокировки процессов выполнения

# На каждом ядре (процессе) будет запущена своя версия Python со своим блокировщиком DIL, но без конкуренции, но для запуска используется больше времени.
# Более медленный старт, бОльшие затраты оперативной памяти

import multiprocessing
import time


def worker(num):
    print(f'Запущен процесс {num}')
    time.sleep(3)
    print(f'Завершён процесс {num}')


if __name__ == '__main__':
    processes = []
    for i in range(5):
        p = multiprocessing.Process(target=worker, args=(i,))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()

    print('Все процессы завершили работу')