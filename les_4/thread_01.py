# Многопоточный подход

# Многопоточный код — это подход к многозадачности, при котором программа может выполнять несколько задач одновременно в разных потоках выполнения.
# Каждый поток выполняет свою задачу независимо от других потоков, что позволяет улучшить производительность программы.

# Примеры многопоточных операций в Python:
    # ● загрузка данных из нескольких файлов одновременно
    # ● параллельная обработка большого объема данных
    # ● одновременное выполнение нескольких запросов к базе данных
    # ● многопоточный веб-сервер, обрабатывающий несколько запросов одновременно

# Преимущества многопоточного кода:
    # ● увеличение производительности программы за счет параллельного выполнения задач
    # ● возможность выполнения нескольких задач одновременно без блокировки

# Недостатки многопоточного кода:
    # ● возможность возникновения конкуренции за ресурсы
    # ● сложность отладки и тестирования многопоточных программ
    # ● возможность блокировки потоков выполнения


# При разработке многопоточных программ необходимо учитывать особенности языка Python, такие как GIL (Global Interpreter Lock), который ограничивает параллелизм в исполнении Python-кода.
# Это означает, что в Python нельзя использовать несколько ядер процессора для выполнения одной программы.


import threading
import time

def worker(num):
    print(f"Начало работы потока {num}")
    time.sleep(3)
    print(f"Конец работы потока {num}")

threads = []
for i in range(5):
    t = threading.Thread(target=worker, args=(i, ))
    threads.append(t)
    t.start()

for t in threads:
    t.join() # ожидание завершения работы потока

print("Все потоки завершили работу")

# 5 потоков работали параллельно, 3 сек, вместо 3 * 5 сек, в случае синхронного подхода
# Вследствие борьбы за ресурсы некоторые потоки даже не успели вставить снос строки, он появился позже
# В результате использования многопоточности процесс выполнения ускорился в 5 раз