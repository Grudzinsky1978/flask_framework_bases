# Основные возможности FastAPI

    # ● Высокая скорость работы благодаря использованию асинхронных функций и типизации данных.
    # ● Автоматическая генерация документации API на основе аннотаций функций и моделей данных.
    # ● Встроенная валидация данных запросов и ответов.
    # ● Поддержка OpenAPI и JSON Schema.
    # ● Простота использования благодаря интуитивно понятному синтаксису и многочисленным примерам.

# Сравнение с другими фреймворками

    # FastAPI имеет ряд преимуществ перед другими популярными фреймворками, такими как Flask и Django.
    # Он более быстрый благодаря использованию асинхронных функций, более безопасный благодаря встроенной валидации данных и поддержке OpenAPI,
    # а также более простой в использовании благодаря интуитивно понятному синтаксису.

# Установка

# pip install fastapi

# В отличие от Flask надо установить асинхронный сервер
# pip install 'uvicorn[standart]'


from fastapi import FastAPI

app = FastAPI() # 



@app.get('/')
async def root(): # корутина (асинхронная функция)
    return {'message': 'Hello, World!'} # FastAPI превратит словарь в JSON объект


# uvicorn main_05:app --reload
# reload отслеживает изменения в коде
# Идея технологии API - от клиенту серверу (и обратно) пересылается JSON объект
# По адресу http://127.0.0.1:8000/ отображается {"message":"Hello, World!"}